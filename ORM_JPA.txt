ORM
 - Object-Relational Mapping
 - Class와 RDB(Relational DataBase)의 테이블을 매핑한다.
 - 어플리케이션의 객체를 RDB 테이블에 자동으로 반영한다.
 - CRUD(Create, Read, Update, Delete)를 간편하게 수행할 수 있다.
 - 개발자는 객체 모델을 이용하여 비즈니스 로직 구성에 집중한다.
 - 내부적으로 쿼리를 생성하여 DB를 조작한다.
 - 개발자는 SQL문을 신경 쓰지 않아도 된다.
 - 부수적인 코드가 줄어든다.
 - 코드의 가독성을 높일 수 있다.
 - 객체지향적인 코드 작성이 가능하다.
 - 유지보수 생산성이 증가되어 비용이 절감된다.
 - 데이터베이스 변경에 따른 SQL 수정이 필요 없다.
 - 설계 오류로 인한 속도 저하와 무결성 오류가 발생할 수 있다.
 - 쿼리 튜닝이 필요한 경우에 결국 SQL을 사용하게 된다.
 - 객체, 관계형 데이터베이스에 대한 선행 학습이 필요하다.
 - 이해가 부족하면 SQL을 직접 사용하는 것보다 못한 상황이 발생할 수 있다.

JPA
 - Java Persistence API
 - 자바 ORM(Object-Relational Mapping) 표준 인터페이스.
 - ORM 솔루션과 매핑을 해주기 위해 사용되는 프레임워크.
 - JPA를 구현한 대표적인 오픈소스는 Hibernate.

@Entity : 데이터베이스의 테이블과 일대일로 매칭되는 객체 단위이며, 클래스를 테이블과 매핑한다고 JPA 에게 알린다.
@Table : @Entity 선언된 클래스에 매핑할 테이블정보(테이블이름)을 알려준다. 이 어노테이션이 생략되면 클래스이름을 테이블이름으로 매핑한다.
@Column : 데이터베이스의 테이블에 있는 컬럼에 필드(변수)를 매핑한다. 별다른 옵션을 설정하지 않는다면 기본적으로는 생략 가능하다.
@Id : @Entity 선언된 클래스의 필드를 테이블의 기본키(Primary Key)에 매핑한다.
@GeneratedValue : 새로운 레코드가 생성될 때마다 마지막 PK 값에서 자동으로 +1 을 해줘야 하는 auto increment 컬럼인 것을 알려준다.
@EmbeddedId : 복합키로서 정의된 값을 정의하고자 할 때 사용한다.
@Enumerated : Java 의 Enum 형태로 되어 있는 미리 정의되어 있는 코드 값이나 구분값을 데이터 타입으로 사용할 때 사용한다.
@Transient : Entity 객체에 속성으로 지정되어 있지만, 데이터베이스 에서는 필요없는 속성일 때 사용한다.
